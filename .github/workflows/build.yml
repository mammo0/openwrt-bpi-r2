name: Build OpenWRT for BPi-R2
on:
    push:
        tags:
            - v*

env:
    DOCKER_IMAGE_FILE: ${{ github.workspace }}/docker_image
    DOCKER_IMAGE_TAG: bpi_r2-openwrt:latest

jobs:
    build_docker_image:
        name: Docker image builder
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Build Docker image
              run: docker build -t $DOCKER_IMAGE_TAG --build-arg PUID=`id -u` --build-arg PGID=`id -g` .
            - name: Save Docker image
              run: docker save -o $DOCKER_IMAGE_FILE $DOCKER_IMAGE_TAG
            - name: Upload Docker image as artifact
              uses: actions/upload-artifact@v2
              with:
                  name: docker_image
                  path: ${{ env.DOCKER_IMAGE_FILE }}

    build_uboot:
        name: U-Boot builder
        needs: build_docker_image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Prepare
              run: ./0_prepare.sh
            - name: Load environment
              uses: c-py/action-dotenv-to-setenv@v3

            - name: Get Docker image artifact
              uses: actions/download-artifact@v2
              with:
                  name: docker_image
                  path: ${{ github.workspace }}
            - name: Load Docker image
              run: docker load -i $DOCKER_IMAGE_FILE

            - name: Build
              run: docker run -v "$ARTIFACTS_DIR":/out $DOCKER_IMAGE_TAG uboot

            - name: Save binary
              uses: actions/upload-artifact@v2
              with:
                  name: uboot_bin
                  path: ${{ env.UBOOT_BIN }}

    build_openwrt:
        name: OpenWRT builder
        needs: build_docker_image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Prepare
              run: ./0_prepare.sh
            - name: Load environment
              uses: c-py/action-dotenv-to-setenv@v3

            - name: Get Docker image artifact
              uses: actions/download-artifact@v2
              with:
                  name: docker_image
                  path: ${{ github.workspace }}
            - name: Load Docker image
              run: docker load -i $DOCKER_IMAGE_FILE

            - name: Build
              run: docker run -v "$ARTIFACTS_DIR":/out $DOCKER_IMAGE_TAG openwrt

            - name: Save kernel
              uses: actions/upload-artifact@v2
              with:
                  name: openwrt_kernel
                  path: ${{ env.OPENWRT_KERNEL }}
            - name: Save rootfs
              uses: actions/upload-artifact@v2
              with:
                  name: openwrt_rootfs
                  path: ${{ env.OPENWRT_ROOTFS }}

    build_images:
        name: Image builder
        needs: [build_uboot, build_openwrt]
        runs-on: ubuntu-latest
        steps:
            - name: Install dependencies
              run: |
                  sudo apt-get install -y \
                      build-essential \
                      curl \
                      dosfstools \
                      e2fsprogs \
                      git

            - name: Checkout
              uses: actions/checkout@v2
            - name: Prepare
              run: ./0_prepare.sh
            - name: Load environment
              uses: c-py/action-dotenv-to-setenv@v3

            - name: Get U-Boot binary
              uses: actions/download-artifact@v2
              with:
                  name: uboot_bin
                  path: ${{ env.ARTIFACTS_DIR }}
            - name: Get OpenWRT kernel
              uses: actions/download-artifact@v2
              with:
                  name: openwrt_kernel
                  path: ${{ env.ARTIFACTS_DIR }}
            - name: Get OpenWRT rootfs
              uses: actions/download-artifact@v2
              with:
                  name: openwrt_rootfs
                  path: ${{ env.ARTIFACTS_DIR }}

            - name: Build
              run: ./3_build_images.sh
            - name: Create asset names
              run: |
                  sd_image_name=$(basename "$SD_IMAGE_FILE")
                  emmc_image_name=$(basename "$EMMC_IMAGE_FILE")
                  emmc_boot0_name=$(basename "$EMMC_BOOT0_FILE")
                  echo "SD_IMAGE_NAME=$sd_image_name" >> $GITHUB_ENV
                  echo "EMMC_IMAGE_NAME=$emmc_image_name" >> $GITHUB_ENV
                  echo "EMMC_BOOT0_NAME=$emmc_boot0_name" >> $GITHUB_ENV

            - name: Create GH Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}
                  release_name: OpenWRT BPi-R2 ${{ github.ref }}
                  draft: false
                  prerelease: false
            - name: Upload SD card image
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ${{ env.SD_IMAGE_FILE }}
                  asset_name: ${{ env.SD_IMAGE_NAME }}
                  asset_content_type: application/octet-stream
            - name: Upload EMMC image
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ${{ env.EMMC_IMAGE_FILE }}
                  asset_name: ${{ env.EMMC_IMAGE_NAME }}
                  asset_content_type: application/octet-stream
            - name: Upload EMMC boot image
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ${{ env.EMMC_BOOT0_FILE }}
                  asset_name: ${{ env.EMMC_BOOT0_NAME }}
                  asset_content_type: application/octet-stream
